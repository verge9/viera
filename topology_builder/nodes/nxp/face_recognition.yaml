face_recognition:
  description: "Face recognition service that streamlizes video frames from IP Camera or stream database Kafka
                Input: <Videostream>
                Output: <Videostream>"
  serviceid: unique_id
  category: "" 
  role: service
  ExternalFunction:
    FeatureDB:
      type: RestAPI
      value: {{ interface.FeatureDB }}
  Input:   #define service input and it will be used to check link type
    name:
      type: option
      choice:
      - VideoSource
      - Featuredb
      - Videostream
      value: {{ interface.Input.name }}
    VideoSource:
      StreamID: {{ previous[0].protocol if interface.Input.name == "VideoSource" }}
      Resolution: {{ previous[0].resolution if interface.Input.name == "VideoSource" }}
      Video format: {{ previous[0].format if interface.Input.name == "VideoSource" }}
      encode: {{ previous[0].encode if interface.Input.name == "VideoSource" }}
      username: {{ previous[0].username if interface.Input.name == "VideoSource" }}
      password: {{ previous[0].password if interface.Input.name == "VideoSource" }}
      url: {{ previous[0].url if interface.Input.name == "VideoSource" }}
    Videostream:
      Broker_IP: {% for block in previous %}{{block.device.local_ip if block.type == "Videostream" }} {% endfor %}
      Broker_Port: {% for block in previous %}{{block.service_port if block.type == "Videostream" }} {% endfor %}
      TopicID: {{ interface["Input"]["Videostream"]["TopicID"] }}
      PartitionID: {{ interface["Input"]["Videostream"]["PartitionID"] if interface.Input.name == "Videostream" }}
      Group: {{ interface["Input"]["Videostream"]["Group"] if interface.Input.name == "Videostream" }}
  Output:
    name:
      type: option
      choice:
      - Videostream
      - TSN port
      value: {{ interface.Output.name }}
    Videostream:
      Broker_IP: {{ successor[0].device.local_ip if interface.Output.name == "Videostream" }}
      Broker_Port: {{ successor[0].service_port if interface.Output.name == "Videostream" }}
      TopicID: {{ interface["Output"]["Videostream"]["TopicID"] }}
      PartitionID: {{ interface["Output"]["Videostream"]["PartitionID"] if interface.Input.name == "Videostream" }}
      Group: {{ interface["Output"]["Videostream"]["Group"] if interface.Input.name == "Videostream" }}
      TopicNum: 4
  Featuredb:
    DB_name: dummy
    DB_address: {% for block in previous %}{{block.device.local_ip if block.type == "FeatureDB" }} {% endfor %}
    Port: {% for block in previous %}{{block.service_port if block.type == "FeatureDB" }} {% endfor %}
    DB_admin_username: dummy
    DB_admin_password: dummy
    count: {% set count = [] -%}{% for block in previous -%}{% if block.type == "FeatureDB" %}{% if count.append(block) -%}{% endif %}{% endif %}{% endfor %}{{ count|length }}
  Compatability:
    arch: arm64
    os: linux
    rfs: ubuntu1604
  dockerapp-compose: # reuse docker compose template, below is a compose example
    image: deploy_manager_ubuntu
    container_name: face_recognition
    hostname: face_recognition
    version: v1.9
    repo : devops.nxp.com
    environment:
    - name: SERVICE_PARAMETERS
      value:
        input: current.Input
        output: current.Output
        Featuredb: current.Featuredb
        #featureDB_IP: current.ExternalFunction.FeatureDB.service_ip
        #featureDB_Port: current.ExternalFunction.FeatureDB.service_port
        #featureDB_URI: current.ExternalFunction.FeatureDB.uris
    command: "cd /root/recognization && ./run_facerecog.sh"
  security: 
    service_token: 
    type: string <token or username/password> 
