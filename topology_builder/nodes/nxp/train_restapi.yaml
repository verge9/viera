Train:
  description: "Auto training service that to generate Tensorflow model from the user Images
                Input: <ImageSentMessage>
                Output: <TrainFinishedMessage>"
  serviceid: unique_id
  category: "" 
  role: service
  type: RestAPI
  service_port: 5050
  Input:
    ImageSentMessage:
      Broker_IP: {% for block in previous %}{{ block.device.local_ip if block.type == "Videostream" }} {% endfor %}
      Broker_Port: {% for block in previous %}{{block.service_port if block.type == "Videostream" }} {% endfor %}
      TopicID: {% for block in previous %}{{ block["topics"]["Consumer"][interface.id]["topic"] if block.type == "Videostream" }} {% endfor %}
      PartitionID: {% for block in previous %}{{block["topics"]["Consumer"][interface.id]["partition_id"] if block.type == "Videostream" }} {% endfor %}
      count: {% set count = [] -%}{% for block in previous -%}{% if block.type == "Videostream" %}{% if count.append(block) -%}{% endif %}{% endif %}{% endfor %}{{ count|length }}
    RestAPI:
      IP: {% for block in previous %}{{block.device.local_ip if block.type == "RestAPI" }} {% endfor %}
      Port: {% for block in previous %}{{block.service_port if block.type == "RestAPI" }} {% endfor %}
      uris: {% for block in previous %}{{block.uris if block.type == "RestAPI" }} {% endfor %}
      count: {% set count = [] -%}{% for block in previous -%}{% if block.type == "RestAPI" %}{% if count.append(block) -%}{% endif %}{% endif %}{% endfor %}{{ count|length }}
  Output:
    TrainFinishedMessage:
      Broker_IP: {{ successor[0].device.local_ip}}
      Broker_Port: {{ successor[0].service_port}}
      TopicID: {{ successor[0]["topics"]["Producer"][interface.id]["topic"] }}
      PartitionID: {{ successor[0]["topics"]["Producer"][interface.id]["partition_id"]}}
  uris:
    TrainServer: /root/models
  Compatability:
    arch: x86
    os: linux
    rfs: ubuntu1804
  dockerapp-compose: # reuse docker compose template, below is a compose example
    image: building-blocks-dataandtrain
    container_name: train
    hostname: train
    version: v1.2
    repo : devops.nxp.com
    environment:
    - name: SERVICE_PARAMETERS
      value:
        input: current.Input
        output: current.Output
    command: "cd /root/bl/ai-building-blocks/train/ && python3 train.py"
  security: 
    service_token: 
    type: string <token or username/password> 
